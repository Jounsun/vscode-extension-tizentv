/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var os = require('os');
var fs = require('fs');
var path = require('path');
(function (LogLevel) {
    LogLevel[LogLevel["Log"] = 0] = "Log";
    LogLevel[LogLevel["Error"] = 1] = "Error";
})(exports.LogLevel || (exports.LogLevel = {}));
var LogLevel = exports.LogLevel;
/** Logger singleton */
var _logger;
function log(msg, level, forceDiagnosticLogging) {
    // Do nothing to hide the logs by Chrome-Debug-Core itself
    /*if (level === void 0) { level = LogLevel.Log; }
    if (forceDiagnosticLogging === void 0) { forceDiagnosticLogging = false; }
    if (_logger)
        _logger.log(msg, level, forceDiagnosticLogging);*/
}
exports.log = log;
function init(isServer, logCallback) {
    if (!_logger) {
        _logger = new Logger(isServer, logCallback);
        if (isServer) {
            logVersionInfo();
        }
    }
}
exports.init = init;
/**
 * Enable diagnostic logging (for non-server mode).
 */
function enableDiagnosticLogging() {
    if (_logger) {
        _logger.diagnosticLoggingEnabled = true;
        if (!_logger.isServer) {
            logVersionInfo();
        }
    }
}
exports.enableDiagnosticLogging = enableDiagnosticLogging;
function logVersionInfo() {
    log("OS: " + os.platform() + " " + os.arch());
    log('Node version: ' + process.version);
    log('Adapter version: ' + require('../../package.json').version);
}
/**
 * Manages logging, whether to console.log, file, or VS Code console.
 */
var Logger = (function () {
    function Logger(isServer, logCallback) {
        this.isServer = isServer;
        this._diagnosticLogCallback = logCallback;
    }
    Object.defineProperty(Logger.prototype, "diagnosticLoggingEnabled", {
        get: function () { return this._diagnosticLoggingEnabled; },
        set: function (enabled) {
            var _this = this;
            this._diagnosticLoggingEnabled = enabled;
            // Create a log file under the extension's (or module's) root. Overwritten on each run.
            var logPath = path.resolve(__dirname, '../../vscode-chrome-debug.txt');
            this._logFileStream = fs.createWriteStream(logPath);
            this._logFileStream.on('error', function (e) {
                _this._sendLog("Error involving log file at path: " + logPath + ". Error: " + e.toString(), LogLevel.Error);
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param forceDiagnosticLogging - Writes to the diagnostic logging channel, even if diagnostic logging is not enabled.
     *      (For warnings/errors that appear whether logging is enabled or not.)
     */
    Logger.prototype.log = function (msg, level, forceDiagnosticLogging) {
        if (this.isServer || this.diagnosticLoggingEnabled || forceDiagnosticLogging) {
            this._sendLog(msg, level);
        }
        // If an error or something else, prepend with '[LogLevel]'
        if (level !== LogLevel.Log) {
            msg = "[" + LogLevel[level] + "] " + msg;
        }
        if (this._logFileStream) {
            this._logFileStream.write(msg + '\n');
        }
    };
    Logger.prototype._sendLog = function (msg, level) {
        // In server mode, console APIs are ok. Outside of server mode, VS Code is watching stdin/out, so never use console APIs.
        if (this.isServer) {
            (level === LogLevel.Log ? console.log : console.error)(msg);
        }
        else if (this._diagnosticLogCallback) {
            this._diagnosticLogCallback(msg, level);
        }
    };
    return Logger;
}());

//# sourceMappingURL=logger.js.map

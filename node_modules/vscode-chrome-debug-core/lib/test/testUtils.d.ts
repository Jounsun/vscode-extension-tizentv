import { DebugProtocol } from 'vscode-debugprotocol';
import { IStackTraceResponseBody } from '../src/chrome/debugAdapterInterfaces';
export declare function setupUnhandledRejectionListener(): void;
export declare function removeUnhandledRejectionListener(): void;
export declare class MockEvent implements DebugProtocol.Event {
    event: string;
    body: any;
    seq: number;
    type: string;
    constructor(event: string, body?: any);
}
/**
 * Calls sinon.mock and patches its 'expects' method to not expect that the mock base object
 * already has an implementation of the expected method.
 */
export declare function getSinonMock(mockBase?: {}): Sinon.SinonMock;
/**
 * Creates a sinon mock and registers it with mockery.
 * @param requireName - The import path to register with mockery
 * @param mockInstance - The object to use as a sinon mock base object
 * @param name - If specified, mock is registered as { [name]: mockInstance }. e.g. if mocking a class.
 * @param asConstructor - If true, the mock instance will be returned when the named mock is called as a constructor
 */
export declare function createRegisteredSinonMock(requireName: string, mockInstance?: {}, name?: string, asConstructor?: boolean): Sinon.SinonMock;
/**
 * Return a base Utilities mock that has Logger.log stubbed out
 */
export declare function getDefaultUtilitiesMock(): any;
export declare function registerEmptyMocks(moduleNames: string | string[]): void;
export declare function getStackTraceResponseBody(aPath: string, lines: number[], sourceReferences?: number[]): IStackTraceResponseBody;
export declare function win32Mocks(): void;
